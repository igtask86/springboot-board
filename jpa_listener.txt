어노테이션 정의
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;

@Retention(RetentionPolicy.RUNTIME)
public @interface EncryptedField {
}



----------------------------------------------
엔터티 리스너
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.PostLoad;
import java.lang.reflect.Field;

public class EncryptionListener {

    @PrePersist
    @PreUpdate
    public void encrypt(Object entity) {
        processFields(entity, true);
    }

    @PostLoad
    public void decrypt(Object entity) {
        processFields(entity, false);
    }

    private void processFields(Object entity, boolean isEncrypt) {
        Field[] fields = entity.getClass().getDeclaredFields();
        for (Field field : fields) {
            if (field.isAnnotationPresent(EncryptedField.class)) {
                try {
                    field.setAccessible(true);
                    String value = (String) field.get(entity);
                    if (value != null) {
                        String processedValue = isEncrypt ? CryptoUtil.encrypt(value) : CryptoUtil.decrypt(value);
                        field.set(entity, processedValue);
                    }
                } catch (Exception e) {
                    throw new RuntimeException("Error processing field: " + field.getName(), e);
                }
            }
        }
    }
}





----------------------------------------------
엔터티 클래스
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.Id;

@Entity
@EntityListeners(EncryptionListener.class)
public class MyEntity {

    @Id
    private Long id;

    @EncryptedField
    private String sensitiveData1;

    @EncryptedField
    private String sensitiveData2;

    // Getters and setters

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getSensitiveData1() {
        return sensitiveData1;
    }

    public void setSensitiveData1(String sensitiveData1) {
        this.sensitiveData1 = sensitiveData1;
    }

    public String getSensitiveData2() {
        return sensitiveData2;
    }

    public void setSensitiveData2(String sensitiveData2) {
        this.sensitiveData2 = sensitiveData2;
    }
}


서비스 클래스
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class MyService {

    @Autowired
    private MyRepository myRepository;

    @Autowired
    private AnotherRepository anotherRepository;

    @Transactional
    public void saveMyEntity(Long id, String sensitiveData1, String sensitiveData2) {
        MyEntity entity = new MyEntity();
        entity.setId(id);
        entity.setSensitiveData1(sensitiveData1);
        entity.setSensitiveData2(sensitiveData2);
        myRepository.save(entity);
    }

    @Transactional
    public void saveAnotherEntity(Long id, String sensitiveData1, String sensitiveData2) {
        AnotherEntity entity = new AnotherEntity();
        entity.setId(id);
        entity.setSensitiveData1(sensitiveData1);
        entity.setSensitiveData2(sensitiveData2);
        anotherRepository.save(entity);
    }

    public MyEntity getMyEntity(Long id) {
        return myRepository.findById(id).orElse(null);
    }

    public AnotherEntity getAnotherEntity(Long id) {
        return anotherRepository.findById(id).orElse(null);
    }
}
